You are an expert MERN stack developer. I am building a feature-rich Instagram clone.

 Tech Stack:
- React (frontend) with Tailwind CSS for styling
- Express.js (backend)
- MongoDB with Mongoose (database)
- Multer for media handling, optionally connected to Cloudinary
- JWT for authentication (token stored in localStorage)
- Axios for API calls
- React Router DOM for page navigation
- React Context API for global state
- Socket.IO (optional for chat/notifications)

---

 DATABASE MODELS

1. **User**
- Fields: `name`, `username`, `email`, `password`, `googleId`, `gender`, `profilePhoto`, `bio`
- Social: `followers`, `followings`, `followerCount`, `followingCount`
- Content: `postCount`, `posts`, `savedPosts`
- Security: hashed password (bcrypt), `comparePassword` method
- Pre-save hook for password hashing

2. **Post**
- Fields: `caption`, `media`, `mediaType` (image/video/text)
- Relations: `postedBy`, `likes`, `savedBy`, `comments` (embedded)
- Metadata: `createdAt`
- Comment schema is embedded

3. **Comment**
- Fields: `content`, `user`, `post`
- Relations: `replies`, `likes`
- Metadata: `createdAt`

4. **Message**
- Fields: `conversationId`, `sender`, `receiver`, `content`, `createdAt`

---

 BACKEND ROUTES

- `/auth`: signup, signin, logout, Google OAuth
- `/user`: update profile, change password, delete account, follow/unfollow, get profile by username/ID, search users, get followers/followings
- `/posts`: create with multer upload, update/delete post, like/unlike, comment, save, get feed, get posts by user or ID
- `/comment`: reply, edit, delete, like/unlike
- `/message`: send, fetch, delete messages

---

 FRONTEND COMPONENTS (React + Tailwind)

** Authentication**
- Signup/login using JWT with Axios
- Google OAuth login flow
- Store JWT in localStorage, validate on refresh
- Protected routes with `useAuth` context

** Feed Page**
- Use `/posts/following/:username` to fetch feed
- Render post cards with media, user info, like/comment/save buttons
- Infinite scroll or pagination support

** Upload Post**
- Use a form to upload image/video + caption
- Send multipart/form-data to `POST /posts/`
- Optional: upload to Cloudinary and save returned URL in MongoDB

** User Profile**
- Display user info via `/username/:username`
- Display userâ€™s posts via `/posts/user/:userId`
- Show follower/following counts and follow/unfollow toggle
- Show saved posts via `/user/:id/saved`

** Edit Profile**
- Form for updating name, email, username, bio, profile photo
- Change password securely via `/profile/:username/password`

** Post Detail Page (Modal)**
- Fetch a single post via `/posts/:postId`
- View full caption, likes, and comments
- Allow user to like, comment, reply, delete their comments

** Search Users**
- Input box to send `/user/search?query=...`
- Show matched users with links to profile

** Messaging**
- View messages between two users: `/messages/:senderId/:receiverId`
- Send new message: `/messages/send`
- Delete message: `/messages/:messageId`
- Optional: implement with Socket.io for real-time updates

** Followers / Following**
- Show lists using `/followers/:id` and `/followings/:id`
- Button to follow/unfollow from list

---

 MEDIA UPLOAD (Essential for Instagram-like Experience)
- Use `multer` for receiving uploads in backend
- Store images/videos in **Cloudinary** or **Firebase Storage**
- Store returned URLs in MongoDB `media` field
- For image preview in React, use `URL.createObjectURL()` before upload

---

 UX + UI Considerations
- Mobile-responsive layout (Tailwind breakpoints)
- Dark mode toggle (optional)
- Animated transitions using **Framer Motion**
- Skeleton loaders (for slow connections)
- Optimistic UI updates (like button triggers UI before server confirms)

---

 STATE MANAGEMENT
- Use React Context API for:
  - Authenticated user
  - Notifications (optional)
- Global Axios instance with token in headers

---

 JWT TOKEN HANDLING
- Store token in `localStorage`
- Send `Authorization: Bearer <token>` in Axios headers
- Decode token on app load to restore user context

---

 ARCHITECTURE & FILE STRUCTURE

client/
src/
components/
pages/
context/
services/ # axios wrappers
App.jsx
main.jsx
server/
controllers/
routes/
models/
middleware/
config/
server.js

---

 OBJECTIVE

Use my routes and schemas to:
- Build clean, component-based React UI with Tailwind
- Setup Axios service to handle backend requests
- Implement protected routing using JWT
- Upload media to cloud storage and store in DB
- Create scalable, Instagram-like functionality
- Optimize for mobile and real-user performance

Also add  features like:
- Reels-style video player
- Story carousel (media with 24h expiration)
- Notifications (follows, likes, comments) using MongoDB + WebSocket


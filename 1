# Running Instagram Clone in VS Code

## Prerequisites

1. **Node.js** (version 18 or higher)
   - Download from [nodejs.org](https://nodejs.org/)
   - Check installation: `node --version`

2. **PostgreSQL Database**
   - Option 1: Local PostgreSQL installation
   - Option 2: Cloud database (Neon, Supabase, Railway)
   - Option 3: Docker PostgreSQL container

3. **VS Code Extensions** (recommended)
   - TypeScript Importer
   - ES7+ React/Redux/React-Native snippets
   - Tailwind CSS IntelliSense
   - PostgreSQL extension

## Setup Steps

### 1. Clone/Download Your Project
```bash
# If using Git
git clone your-repository-url
cd instagram-clone

# Or download and extract the project files
```

### 2. Install Dependencies
```bash
npm install
```

### 3. Environment Setup
Create a `.env` file in the root directory:

```env
# Database Configuration
DATABASE_URL=postgresql://username:password@localhost:5432/instagram_clone
PGHOST=localhost
PGPORT=5432
PGUSER=your_username
PGPASSWORD=your_password
PGDATABASE=instagram_clone

# Session Secret (generate a random string)
SESSION_SECRET=your-super-secret-session-key-here

# Replit Auth (for local development, you may need alternatives)
REPL_ID=your-repl-id
REPLIT_DOMAINS=localhost:5000
```

### 4. Database Setup

#### Option A: Local PostgreSQL
```bash
# Create database
createdb instagram_clone

# Run schema migration
npm run db:push
```

#### Option B: Cloud Database (Recommended)
1. Create a free PostgreSQL database on:
   - [Neon](https://neon.tech/) (recommended)
   - [Supabase](https://supabase.com/)
   - [Railway](https://railway.app/)

2. Copy the connection string to your `.env` file
3. Run: `npm run db:push`

### 5. Authentication Setup

Since this app uses Replit Auth, you'll need to modify for local development:

#### Option A: Mock Authentication (for development)
Create `server/mockAuth.ts`:
```typescript
import type { RequestHandler } from "express";

export const mockAuth: RequestHandler = (req, res, next) => {
  // Mock user for development
  req.user = {
    claims: {
      sub: "dev-user-123",
      email: "dev@example.com",
      first_name: "Developer",
      last_name: "User",
      profile_image_url: null
    }
  };
  next();
};

export const isAuthenticated: RequestHandler = mockAuth;
```

Then update `server/routes.ts` to use mock auth in development:
```typescript
import { isAuthenticated } from "./mockAuth"; // For development
// import { isAuthenticated } from "./replitAuth"; // For production
```

#### Option B: Use Alternative Auth
- Implement Google OAuth
- Use Auth0
- Set up local Passport.js with email/password

### 6. Running the Application

#### Development Mode
```bash
npm run dev
```

This starts both:
- Backend server on http://localhost:5000
- Frontend with hot reload

#### Production Build
```bash
npm run build
npm start
```

## VS Code Setup

### 1. Open Project
```bash
code .
```

### 2. Recommended VS Code Settings
Create `.vscode/settings.json`:
```json
{
  "typescript.preferences.includePackageJsonAutoImports": "auto",
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "tailwindCSS.experimental.classRegex": [
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ]
}
```

### 3. Debugging Configuration
Create `.vscode/launch.json`:
```json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Server",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/server/index.ts",
      "outFiles": ["${workspaceFolder}/dist/**/*.js"],
      "env": {
        "NODE_ENV": "development"
      },
      "console": "integratedTerminal",
      "restart": true,
      "runtimeArgs": ["-r", "tsx/esm"]
    }
  ]
}
```

## File Structure Overview
```
instagram-clone/
├── client/                 # React frontend
│   ├── src/
│   │   ├── pages/          # Page components
│   │   │   ├── auth/       # Authentication pages
│   │   │   ├── feed/       # Feed page
│   │   │   ├── profile/    # Profile pages
│   │   │   ├── messages/   # Messaging pages
│   │   │   ├── explore/    # Explore page
│   │   │   └── notifications/ # Notifications
│   │   ├── components/     # Reusable components
│   │   ├── hooks/          # Custom React hooks
│   │   └── lib/            # Utilities
├── server/                 # Express.js backend
│   ├── routes.ts           # API routes
│   ├── storage.ts          # Database operations
│   ├── db.ts               # Database connection
│   └── replitAuth.ts       # Authentication
├── shared/                 # Shared TypeScript types
│   └── schema.ts           # Database schema
└── package.json
```

## Available Scripts

```bash
# Development
npm run dev              # Start development server

# Database
npm run db:push          # Push schema to database
npm run db:studio        # Open database studio (if using Drizzle Studio)

# Build
npm run build            # Build for production
npm start                # Start production server

# Type checking
npm run type-check       # Check TypeScript types
```

## Troubleshooting

### Common Issues

1. **Database Connection Error**
   - Check your DATABASE_URL format
   - Ensure PostgreSQL is running
   - Verify credentials

2. **Port Already in Use**
   ```bash
   # Kill process on port 5000
   npx kill-port 5000
   ```

3. **TypeScript Errors**
   ```bash
   # Clear cache and reinstall
   rm -rf node_modules package-lock.json
   npm install
   ```

4. **Authentication Issues**
   - Use mock authentication for local development
   - Check environment variables

### Development Tips

1. **Hot Reload**: The dev server automatically reloads on changes
2. **Database Changes**: Run `npm run db:push` after schema changes
3. **Debugging**: Use VS Code debugger or browser dev tools
4. **API Testing**: Use tools like Postman or Thunder Client VS Code extension

## Next Steps

1. Start development server: `npm run dev`
2. Open http://localhost:5000 in your browser
3. Begin customizing the application
4. Add your own features and styling

Your Instagram clone is now ready for local development in VS Code!